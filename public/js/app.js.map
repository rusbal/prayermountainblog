{"version":3,"sources":["app.js","arrownextfield.jquery.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["\n/**\n * First we will load all of this project's JavaScript dependencies which\n * include Vue and Vue Resource. This gives a great starting point for\n * building robust, powerful web applications using Vue and Laravel.\n */\n\nrequire('./bootstrap');\n\n/**\n * Next, we will create a fresh Vue application instance and attach it to\n * the body of the page. From here, you may begin adding components to\n * the application, or feel free to tweak this setup for your needs.\n */\n\n// Vue.component('example', require('./components/Example.vue'));\n//\n// const app = new Vue({\n//     el: 'body'\n// });\n","/**\n * Plugin Name: arrowNextField\n * Author: Raymond S. Usbal <raymond@philippinedev.com>\n * Date: 29 September 2016\n *\n * A plugin that transfers focus with the use of the arrow keys.\n */\nalert('this is arrownextfield');\n(function ( $ ) {\n \n    $.fn.arrowNextField = function( options ) {\n\n        var settings = $.extend({\n            selector: '',\n            checkbox: false,\n            reset: false,\n            button: false\n        }, options );\n\n        /**\n         * Build selector\n         */\n        settings.selector =  ':input';\n        settings.selector += ':not(:hidden)';\n        settings.selector += settings.checkbox ? '' : ':not(:checkbox)';\n        settings.selector += settings.button   ? '' : ':not(:button)';\n        settings.selector += settings.reset    ? '' : ':not(:reset)';\n\n        /**\n         * Iterate to find the maximum defined tabindex.\n         * We will use the next value to the maximum used.\n         */\n        var nextTabindex = -1;\n        this.find('[tabindex]').attr('tabindex', function (a, b) {\n            nextTabindex = Math.max(nextTabindex, +b);\n        });\n\n        /**\n         * Add tabindex if not set already.\n         */\n        this.find(settings.selector).each(function(){\n            if (! $(this).is(\"[tabindex]\")) {\n                nextTabindex += 1;\n                $(this).attr('tabindex', nextTabindex);\n            }\n        });\n \n        /**\n         * Function to transfer focus to previous or next form control whichever \n         * is appropriate depending on the key pressed.\n         */\n        var arrowToField = function($this, direction) {\n\n            var selStart = $this.prop(\"selectionStart\"),\n                tabindex = parseInt($this.attr('tabindex'));\n\n            if (direction == 'up' && selStart == 0) {\n                $('[tabindex=' + (tabindex - 1) + ']').focus();\n                return true;\n\n            } else if (direction == 'down' && (selStart == $this.val().length)) {\n                $('[tabindex=' + (tabindex + 1) + ']').focus();\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Call arrowToField() when arrow keys are pressed.\n         */\n        this.find(settings.selector).keydown(function(e){\n            if (e.keyCode == 37 || e.keyCode == 38) {\n                if (arrowToField($(this), 'up')) {\n                    e.preventDefault();\n                }\n\n            } else if (e.keyCode == 39 || e.keyCode == 40) {\n                if (arrowToField($(this), 'down')) {\n                    e.preventDefault();\n                }\n            }\n        });\n\n        return this;\n    };\n \n}( jQuery ));\n"],"sourceRoot":"/source/"}